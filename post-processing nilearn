#First step: Import necessary packages for the full script
from nilearn import datasets #For atlases
from nilearn import plotting #To plot brain images
from nilearn.input_data import NiftiLabelsMasker #To mask the data
import pandas as pd #For dataframe manipulation (e.g. confound file)
import numpy as np

###
#Import the necessary atlases for the current processing. Chose the atlases you need

atlas_schaefer = datasets.fetch_atlas_schaefer_2018(n_rois=200)
atlas_filename_schaefer = atlas_schaefer.maps
labels_schaefer = atlas_schaefer.labels
print(atlas_filename_schaefer)
print(labels_schaefer)
print(len(labels_schaefer))

#SAVE THE LABEL OUTPUT TO FILE
plotting.plot_roi(atlas_filename_schaefer)

print('The atlas is located at ...') #See nilearn docs

#atlas_power = datasets.fetch_coords_power_2011()
#print(atlas_power)
#SAVE THE LABEL OUTPUT TO FILE
#plotting.plot_roi(atlas_filename_power)

subjects_location = '/Users/stong3/Desktop/test_fmriprep_PAD/fmriprep/fmriprep/fmriprep/'

print(pre_processed_fmri_file)
print(full_confound_file_fmriprep)

#for subject in subject_location:
subject = 'MTL0002' #Change for argument parser? Or process all subjects in a folder?
session = 'BL00A' #
print('Processing subject ' + subject + ' for session BL00A...')
    
print('Fetching the paths for the fMRI files and the confound files...')
pre_processed_fmri_file = subjects_location + 'sub-' + subject + '/ses-' + session + '/func/' + 'sub-' + subject + '_' + 'ses-' + session + '_task-rest_run-1_space-T1w_desc-preproc_bold.nii.gz'
full_confound_file_fmriprep = subjects_location + 'sub-' + subject + '/ses-' + session + '/func/' + 'sub-' + subject + '_' + 'ses-' + session + '_task-rest_run-1_desc-confounds_regressors.tsv'
print('The path for the fmri file is:' + pre_processed_fmri_file)
print('The path for the full confound file is:' + full_confound_file_fmriprep)
#sub-MTL0002_ses-BL00A_task-rest_run-1_desc-confounds_regressors

#First we scrub frame displacement out of the image. SEE FMRIPOP FUNCTION! 
#First we cut the confound file
confounds = pd.read_csv(full_confound_file_fmriprep, delimiter = '\t')
print(confounds.head())

confoundsfinal = confounds[['csf', 'white_matter', 'global_signal', 'trans_x', 'trans_y', 'trans_z', 'rot_x', 'rot_y', 'rot_z']]
print(confoundsfinal.head())
print(confoundsfinal.info())
confounds_np = confoundsfinal.to_numpy() #Nilearn accepts either a list, a tuple, 
    #masker_scrub = NiftiLabe


from nilearn.input_data import NiftiLabelsMasker
masker = NiftiLabelsMasker(labels_img=atlas_filename_schaefer, standardize=True, verbose=5, memory='nilearn_cache')
time_series = masker.fit_transform(pre_processed_fmri_file, confounds=confounds_np)
print(np.shape(time_series))

from nilearn.connectome import ConnectivityMeasure
correlation_measure = ConnectivityMeasure(kind = 'correlation')
correlation_matrix = correlation_measure.fit_transform([time_series])[0]
print(np.shape(correlation_matrix))
print(len(labels_schaefer))
plotting.plot_matrix(correlation_matrix)

np.fill_diagonal(correlation_matrix, 0)
plotting.plot_matrix(correlation_matrix, figure=(10, 8), labels=labels_schaefer, vmax=0.8, vmin=-0.8, reorder=True)



# Examining the confounds and selecting the variables we need.



